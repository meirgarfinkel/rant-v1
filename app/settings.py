"""
Django settings for app project.

Generated by "django-admin startproject" using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os

from dotenv import load_dotenv
from pathlib import Path
from cryptography.fernet import Fernet


# Build paths inside the project like this: BASE_DIR / "subdir".
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env only in development
if os.getenv("ENV", "development") == "development":
    load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don"t run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False").lower() in ["true", "1"]

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "users",
    "suggestions",
    "common",
    "theme",
    "tailwind",
    "django_browser_reload",
]

TAILWIND_APP_NAME = "theme"
if not DEBUG:
    TAILWIND_CSS_BUILD = "build"  # This will minify the CSS in production.
    TAILWIND_CSS_MINIFY = True  # Enable CSS minification in production

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8080",
    "https://localhost:8080",
]

ROOT_URLCONF = "app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "OPTIONS": {
            "debug": True,  # Ensure debug mode is enabled for templates
            "loaders": [  # Disable template caching
                "django.template.loaders.filesystem.Loader",
                "django.template.loaders.app_directories.Loader",
            ],
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "app.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB"),
        "USER": os.getenv("POSTGRES_USER"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
        # This must match the service name in docker-compose.yml
        "HOST": os.getenv("POSTGRES_HOST"),
        "PORT": os.getenv("POSTGRES_PORT"),
    }
}


AUTH_USER_MODEL = "users.User"
LOGIN_URL = "users/login"
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = True  # If using HTTPS
SESSION_COOKIE_SAMESITE = "Lax"


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# Define where static files should be served from (for Django development)
STATIC_URL = "/static/"

# Where static files should be collected (this will be used by `collectstatic`)
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")  # Path for collected static files

# Include directories where static files are stored (add your Tailwind build output here)
STATICFILES_DIRS = [
    BASE_DIR / "static",  # Any other manually managed static files
    BASE_DIR / "theme" / "static",  # Tailwindâ€™s build output directory
]

STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"

BASE_URL = os.getenv("BASE_URL", "http://localhost:8080/")
# Login and logout URLs
LOGIN_REDIRECT_URL = "/suggestions/list/"
LOGOUT_REDIRECT_URL = "/users/login/"


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Key used for anonymizing suggestions (do not store in your DB)
ANONYMOUS_SECRET_KEY = os.getenv("ANONYMOUS_SECRET_KEY", "a-very-secret-key")

# Load from environment or generate (for dev only)
SECRET_PEPPER = os.getenv("SECRET_PEPPER", Fernet.generate_key().decode()).encode()
SESSION_COOKIE_AGE = 3600 * 8  # 8 hours
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_SECURE = True

# Validate presence in production
# if not os.getenv('SECRET_PEPPER') and DEBUG is False:
#    raise RuntimeError("SECRET_PEPPER environment variable must be set in production")
